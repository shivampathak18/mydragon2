{
  "name": "lout",
  "description": "API documentation generator plugin for hapi",
  "version": "6.2.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/lout"
  },
  "main": "index",
  "keywords": [
    "docs",
    "hapi"
  ],
  "engines": {
    "node": ">=0.10.30"
  },
  "dependencies": {
    "boom": "2.x.x",
    "handlebars": "^3.0.0",
    "hoek": "2.x.x"
  },
  "peerDependencies": {
    "hapi": ">= 8",
    "joi": ">= 5.1.x"
  },
  "devDependencies": {
    "hapi": ">= 8",
    "joi": ">= 5.1.x",
    "lab": "5.x.x",
    "cheerio": "0.x.x",
    "code": "1.x.x"
  },
  "scripts": {
    "test": "lab -r console -t 100 -a code",
    "test-cov-html": "lab -r html -o coverage.html -a code"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/hapijs/lout/raw/master/LICENSE"
    }
  ],
  "readme": "![lout Logo](https://raw.github.com/hapijs/lout/master/images/lout.png)\n\nAPI documentation generator for [**hapi**](https://github.com/hapijs/hapi)\n\n[![npm version](https://badge.fury.io/js/lout.svg)](http://badge.fury.io/js/lout)\n[![Build Status](https://secure.travis-ci.org/hapijs/lout.svg)](http://travis-ci.org/hapijs/lout)\n[![Build status](https://ci.appveyor.com/api/projects/status/05c8hiy96fmn0s37/branch/master?svg=true)](https://ci.appveyor.com/project/hapijs/lout/branch/master)\n[![Dependencies Status](https://david-dm.org/hapijs/lout.svg)](https://david-dm.org/hapijs/lout)\n[![DevDependencies Status](https://david-dm.org/hapijs/lout/dev-status.svg)](https://david-dm.org/hapijs/lout#info=devDependencies)\n\nLead Maintainer: [Nicolas Morel](https://github.com/Marsup)\n\n## Description\n**lout** is a documentation generator for **hapi** servers, providing a human-readable guide for every endpoint\nusing the route configuration. The module allows full customization of the output.\n\n## Live demo\nYou can find a [live demo](http://lout.herokuapp.com/) of lout using the unit tests routes.\nThe routes are of course fake but you can get a grasp of what lout looks like given various inputs.\n\n## Usage\n\n```javascript\nvar Hapi = require('hapi');\nvar server = new Hapi.Server();\n\nserver.connection({ port: 80 });\n\nserver.register({ register: require('lout') }, function(err) {\n});\n\nserver.start();\n```\n\n## Usage before Hapi 8.x\n\n```javascript\nvar Hapi = require('hapi');\nvar server = new Hapi.Server(80);\n\nserver.pack.register({ plugin: require('lout') }, function() {\n    server.start();\n});\n```\n\n## Usage before Hapi 7.x\n\n```javascript\nvar Hapi = require('hapi');\nvar server = new Hapi.Server(80);\n\nserver.route([{\n    your routes...\n}]);\n\nserver.pack.require('lout', function() {\n    server.start();\n});\n\n```\n\n## Parameters\nThe following options are available when registering the plugin:\n- _'engines'_ - an object where each key is a file extension (e.g. 'html', 'jade'), mapped to the npm module name (string) used for rendering the templates.  Default is { html: 'handlebars' }.\n- _'endpoint'_ - the path where the route will be registered.  Default is /docs.\n- _'basePath'_ - the absolute path to the templates folder.  Default is the lout templates folder.\n- _'cssPath'_ - the absolute path to the css folder.  Default is the lout css folder. It must contain a style.css.\n- _'helpersPath'_ - the absolute path to the helpers folder.  Default is the lout helpers folder. This might need to be null if you change the basePath.\n- _'partialsPath'_ - the absolute path to the partials folder.  Default is the lout templates folder. This might need to be null if you change the basePath.\n- _'auth'_ - the route configuration for authentication.  Default is to disable auth.\n- _'indexTemplate'_ - the name of the template file to contain docs main page.  Default is 'index'.\n- _'routeTemplate'_ - the name of the route template file.  Default is 'route'.\n- _'filterRoutes'_ - a function that receives a route object containing `method` and `path` and returns a boolean value to exclude routes.\n\n### Ignoring a route in documentation\n\nIf you want a specific route not to appear in lout's documentation, you have to set lout settings for this specific route to false.\n\nHere is an example snippet of a route configuration :\n\n```js\n{\n  method: 'GET',\n  path: '/myroute',\n  config: {\n    handler: [...],\n    [...]\n    plugins: {\n      lout: false\n    }\n  }\n}\n\n```\n\nIf you want to exclude multiple routes using conditions, you can use `filterRoutes` when registering lout :\n```js\nserver.pack.register({\n  plugin: require('lout'),\n  options: {\n    filterRoutes: function (route) {\n      return route.method !== '*' && !/^\\/private\\//.test(route.path);\n    }\n  }\n}, function() {\n    server.start();\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hapijs/lout/issues"
  },
  "homepage": "https://github.com/hapijs/lout",
  "_id": "lout@6.2.1",
  "_shasum": "9e919e9433740bbf7401b412842b635663f739b3",
  "_from": "https://registry.npmjs.org/lout/-/lout-6.2.1.tgz",
  "_resolved": "https://registry.npmjs.org/lout/-/lout-6.2.1.tgz"
}
