// This is a file generated by the yeoman generator hapijs

/**
* Unit tests for all the auth endpoints
*
* @type {exports}
*/

var Lab = require('lab'),
  server = require('../../../../index'),
  Code = require('code');

/**
* All the tests related to tasks
*/
var lab = Lab.script(),
  token,
  user;

lab.experiment('login', function() {

  lab.test('With an invalid string as username', function (done) {
    var options = {
      method: 'POST',
      url: '/api/v0/login',
      payload: {
        email: '@#$%^ ../',
        password: 'olamoifriend'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(401);

      done();
    });
  });

  lab.test('With an invalid username', function (done) {
    var options = {
      method: 'POST',
      url: '/api/v0/login',
      payload: {
        email: 'randomuserthatdoesnotexist',
        password: 'olamoifriend'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(401);

      done();
    });
  });

  lab.test('As a valid user (vaishaks) with a wrong password.', function (done) {
    var options = {
      method: 'POST',
      url: '/api/v0/login',
      payload: {
        email: 'vaishak@socialcops.org',
        password: 'olamoifriend'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(401);

      done();
    });
  });

  lab.test('As a valid user (vaishaks).', function (done) {
    var options = {
      method: 'POST',
      url: '/api/v0/login',
      payload: {
        email: 'vaishak@socialcops.org',
        password: 'hellohello'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;
      token = result.token;

      Code.expect(response.statusCode).to.equal(200);

      done();
    });
  });
});
lab.experiment('token', function() {

  lab.test('Request for a new token with a random string.', function (done) {
    var options = {
      method: 'POST',
      url: '/api/v0/token',
      payload: {
        token: 'invalidtoken'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(401);

      done();
    });
  });

  lab.test('Request for a new token with an invalid token i.e. user does not exit',
  function (done) {
    var options = {
      method: 'POST',
      url: '/api/v0/token',
      payload: {
        token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiJpbnZhbGlkI'+
          'iwianRpIjoiNTUwYTc1OTEzZjA4ZTI4ZjEyMDk3OTZmIiwiaWF0IjoxNDI2NzQ4OD'+
          'E3LCJleHAiOjE0MjY3NDg4NTJ9._k9P8e6xqMaJWkOqoqGu0sKwSWY80g0'+
          '2CeFWZGAlFn8'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(401);

      done();
    });
  });

  lab.test('Request for a new token with a valid token.', function (done) {
    var options = {
      method: 'POST',
      url: '/api/v0/token',
      payload: {
        token: token
      }
    };

    server.inject(options, function (response) {
      var result = response.result;
      token = result.token;

      Code.expect(response.statusCode).to.equal(200);

      done();
    });
  });
});

lab.experiment('test', function() {

  lab.test('Check test endpoint with a random string as token.', function (done) {
    var options = {
      method: 'GET',
      url: '/api/v0/test',
      headers: {
        'Authorization': 'Bearer ' + 'invalidtoken.sasdfsa.adfs'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(401);

      done();
    });
  });

  lab.test('Check test endpoint with an invalid token i.e. user does not exit.',
  function (done) {
    var options = {
      method: 'GET',
      url: '/api/v0/test',
      headers: {
        'Authorization': 'Bearer ' +
          'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aiOiJpbnZhbGlkI'+
          'iwianRpIjoiNTUwYTc1OTEzZjA4ZTI4ZjEyMDk3OTZmIiwiaWF0IjoxNDI2NzQ4OD'+
          'E3LCJleHAiOjE0MjY3NDg4NTJ9._k9P8e6xqMaJWkOqoqGu0sKwSWY80g0'+
          '2CeFWZGAlFn8'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(401);

      done();
    });
  });

  lab.test('Check test endpoint with a valid token.', function (done) {
    var options = {
      method: 'GET',
      url: '/api/v0/test',
      headers: {
        'Authorization': 'Bearer ' + token
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(200);

      done();
    });
  });
});

lab.experiment('user', function() {

  lab.test('Trying to create a user with a missing password field.', function (done) {
    var options = {
      method: 'POST',
      url: '/api/v0/users',
      payload: {
        firstname: 'newuser123',
        email: 'user@site.com'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;
      user = result;

      Code.expect(response.statusCode).to.equal(400);

      done();
    });
  });

  lab.test('Create a valid new user.', function (done) {
    var options = {
      method: 'POST',
      url: '/api/v0/users',
      payload: {
        firstname: 'newuser123',
        lastname: 'lololol',
        password: 'password',
        email: 'user@site.com'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;
      user = result;

      Code.expect(response.statusCode).to.equal(200);

      done();
    });
  });

  lab.test('Delete a user with an invalid token.', function (done) {
    var options = {
      method: 'DELETE',
      url: '/api/v0/users/' + user._id,
      headers: {
        'Authorization': 'Bearer ' +
          'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aiOiJpbnZhbGlkI'+
          'iwianRpIjoiNTUwYTc1OTEzZjA4ZTI4ZjEyMDk3OTZmIiwiaWF0IjoxNDI2NzQ4OD'+
          'E3LCJleHAiOjE0MjY3NDg4NTJ9._k9P8e6xqMaJWkOqoqGu0sKwSWY80g0'+
          '2CeFWZGAlFn8'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(401);

      done();
    });
  });

  lab.test('Delete an invalid user with valid credentials.', function (done) {
    var options = {
      method: 'DELETE',
      url: '/api/v0/users/invaliduserid',
      headers: {
        'Authorization': 'Bearer ' + token
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(404);

      done();
    });
  });

  lab.test('Delete a user with valid credentials.', function (done) {
    var options = {
      method: 'DELETE',
      url: '/api/v0/users/' + user._id,
      headers: {
        'Authorization': 'Bearer ' + token
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(200);

      done();
    });
  });
});

lab.experiment('logout', function() {

  lab.test('Logout a user with an invalid token.', function (done) {
    var options = {
      method: 'GET',
      url: '/api/v0/logout',
      headers: {
        'Authorization': 'Bearer ' +
        'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aiOiJpbnZhbGlkI'+
        'iwianRpIjoiNTUwYTc1OTEzZjA4ZTI4ZjEyMDk3OTZmIiwiaWF0IjoxNDI2NzQ4OD'+
        'E3LCJleHAiOjE0MjY3NDg4NTJ9._k9P8e6xqMaJWkOqoqGu0sKwSWY80g0'+
        '2CeFWZGAlFn8'
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(401);

      done();
    });
  });

  lab.test('Logout a user with valid credentials.', function (done) {
    var options = {
      method: 'GET',
      url: '/api/v0/logout',
      headers: {
        'Authorization': 'Bearer ' + token
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(401);

      done();
    });
  });

  lab.test('Trying to hit the test endpoint after logout.', function (done) {
    var options = {
      method: 'GET',
      url: '/api/v0/test',
      headers: {
        'Authorization': 'Bearer ' + token
      }
    };

    server.inject(options, function (response) {
      var result = response.result;

      Code.expect(response.statusCode).to.equal(401);

      done();
    });
  });
});

exports.lab = lab;
