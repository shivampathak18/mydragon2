// This is a file generated by the yeoman generator hapijs

/**
 * Controller which handles requests/responses relating to file
 *
 * @type {scrollDao|exports}
 */

var scrollDao = require('./scroll-dao'),
	apisearch = require('../utils/search'),
	Response = require('../utils/response'),
	Deamon = require('../utils/deamon');
var Boom = require('boom');
var mongoose = require("mongoose");
var moment = require("moment");

var _this = this;

exports.scroll = function (request, reply) {

	_this.scrollId = request.params.id;
	console.log('id=',_this.scrollId);
	_this.endpoint = 'scroll';
	//Response.initialize();	
	scrollDao.findOne({$or:[{'metaScrollId':_this.scrollId},{'dataScrollId':_this.scrollId},{'userScrollId':_this.scrollId}]},function(err,data){
		//console.log('scrolldata db',arguments);
		if(err)
		{
			reply({'success':false,'error':err});
			return;
		}			
		_this.startScroll(request,reply,data);
		//scrollData = 
	});
	
};

exports.startScroll = function(request,reply,scrollData){
	var parallel = false; var metaFlag = false; var dataFlag = false;

	//console.log('scrollData',scrollData);
	/*
	if(scrollData.metaScrollId && scrollData.metaScrollId != '')
		metaFlag = true;
	if(scrollData.dataScrollId && scrollData.dataScrollId != '')
		dataFlag = true;
	if(scrollData.userScrollId && scrollData.userScrollId != '')
		parallel = true;

	if(metaFlag && dataFlag)
		parallel = true;
	*/

	
	//_this.dataScrollId = scrollData.dataScrollId;
	//_this.metaScrollId = scrollData.metaScrollId;
	var exec = scrollData.exec;
	var deamonParams = {'endpoint':_this.endpoint,'userScrollId':scrollData.userScrollId,'metaScrollId':scrollData.metaScrollId,'dataScrollId':scrollData.dataScrollId,'exec':''};
	if(exec === 'parallel')
	{
		console.log('starting parallel');

		// Use Q for prallel processing
		deamonParams['exec'] = 'parallel';
    	Deamon.main(deamonParams,request,reply);
	}
	else if(exec === 'data')
	{// Use Q for data processing
    	deamonParams['exec'] = 'data';
    	Deamon.main(deamonParams,request,reply);
	}
	else if(exec === 'meta')
	{// Q Items for meta processing
    	deamonParams['exec'] = 'meta';
    	Deamon.main(deamonParams,request,reply);
	}
};
	

/**
 * Add a scrollid to DB
 *
 * @param req
 * @param reply
 */
exports.create = function (scrollParams) {
	var data = scrollParams;
 	var _scrollId = new scrollDao(data)
	
    _scrollId.save(function (err, record) {
      if(err){
        console.log(arguments)
        return {'success':false,'error':Boom.wrap(err)};
      }
      return {'success':true};
    });
  
};

/**
 * Gets all files
 *
 * @param req
 * @param reply
 */
exports.find = function (payload) {
  scrollDao.find(payload,function (err, data) {
    if (err) {
      return ({'success':false,'error':Boom.wrap(err)});
    }
    return({'success':true,'data':data});
  });
};

/**
 * Get a specific file by id
 *
 * @param req
 * @param reply
 */
exports.findById = function (id) {

  scrollDao.findById(id, function (err, data) {
    if (err) {
      return ({'success':false,'error':Boom.wrap(err)});
    }
    // Create link for access
    return {'success':true,'data':data};
	});
};

/**
 * Update a specific file by id
 *
 * @param req
 * @param reply
 */
exports.update = function (id, payload) {

  scrollDao.update(id, payload, function (err, data) {
    if (err) {
      return ({'success':false,'error':Boom.wrap(err)});
    }
    return({'success':true,'data':data});
  });
};
    
/**
 * Remove a specific file by id
 *
 * @param req
 * @param reply
 */
exports.remove = function (id) {

  scrollDao.remove(id, function (err, data) {
    if (err) {
      return ({'success':false,'error':Boom.wrap(err)});
    }
    return({'success':true,'data':data});
  });
};

/* Add new methods above */
