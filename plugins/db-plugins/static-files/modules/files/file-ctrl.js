// This is a file generated by the yeoman generator hapijs

/**
 * Controller which handles requests/responses relating to file
 *
 * @type {fileDao|exports}
 */
var fileDao = require('./file-dao');
var linkDao = require('../links/link-dao');
var Boom = require('boom');
var fs = require("fs");
var path = require("path");
var mongoose = require("mongoose");
var moment = require("moment");
var _ = require("underscore");
/**
 * Get a specific file by id
 *
 * @param req
 * @param reply
 */
exports.findByPath = function (req, reply) {
  fileDao.findOne({path : '/' + req.params.path}, function (err, data) {
    if (err || _.isEmpty(data)) {
      return reply(Boom.notFound(req.params.path));
    }
    // Create link for access
    var settings = req.server.plugins['static-files']

    var data = data;
    var file_id = data._id;
    var link_id = mongoose.Types.ObjectId();
    

    fs.mkdirSync(path.join(settings['link_path'], link_id.toString()))

    var link_path = path.join(settings['link_path'],
                              link_id.toString(), data.file_name);
    var url = path.join(settings['storage_host'],
                        link_id.toString(), data.file_name);

    var now = moment();
    var expires_at = now.add(settings['expire_after'], 'seconds')


    fs.symlink(data['data_path'], link_path, function(err){

      if(err){
        console.log(err);
        return reply(Boom.wrap(err))
      }

      var link = new linkDao({
        _id: link_id,
        file_id: file_id,
        file_path: data['path'],
        path: link_path,
        expires_at: expires_at,
        status : 'LIVE'
      })

      link.save(function(err){
        if(err){
          return reply(Boom.wrap(err));
        }
        settings
        reply({
          url : url
        });
      })
    })
  });
};


/* Add new methods above */
